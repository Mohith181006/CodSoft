#include <iostream>
#include <vector>

using namespace std;

// Function to display the game board
void displayBoard(const vector<vector<char>>& board) {
    cout << "-------------\n";
    for (int i = 0; i < 3; i++) {
        cout << "| ";
        for (int j = 0; j < 3; j++) {
            cout << board[i][j] << " | ";
        }
        cout << "\n-------------\n";
    }
}

// Function to check if the current player has won
bool checkWin(const vector<vector<char>>& board, char player) {
    // Check rows, columns, and diagonals for a win
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) return true;  // Row check
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) return true;  // Column check
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) return true;  // Diagonal check
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) return true;  // Diagonal check
    return false;
}

// Function to check if the game is a draw
bool checkDraw(const vector<vector<char>>& board) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') return false;  // Empty space found, game is not a draw yet
        }
    }
    return true;  // No empty spaces, game is a draw
}

// Function to handle the player's move
bool makeMove(vector<vector<char>>& board, int row, int col, char player) {
    if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ') {
        board[row][col] = player;
        return true;
    }
    return false;
}

int main() {
    char currentPlayer = 'X';
    char playAgain;
    bool gameWon = false;

    do {
        vector<vector<char>> board(3, vector<char>(3, ' '));
        gameWon = false;

        while (!gameWon) {
            displayBoard(board);
            int row, col;

            // Prompt the current player for a move
            cout << "Player " << currentPlayer << ", enter your move (row and column): ";
            cin >> row >> col;

            // Adjust the row and column values to match 0-based indexing
            row--;
            col--;

            if (makeMove(board, row, col, currentPlayer)) {
                // Check for win or draw
                if (checkWin(board, currentPlayer)) {
                    displayBoard(board);
                    cout << "Player " << currentPlayer << " wins!" << endl;
                    gameWon = true;
                } else if (checkDraw(board)) {
                    displayBoard(board);
                    cout << "It's a draw!" << endl;
                    gameWon = true;
                } else {
                    // Switch players
                    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
                }
            } else {
                cout << "Invalid move, please try again!" << endl;
            }
        }

        // Ask if the players want to play again
        cout << "Do you want to play again? (y/n): ";
        cin >> playAgain;
        if (playAgain == 'y' || playAgain == 'Y') {
            currentPlayer = 'X';  // Reset to Player X for the new game
        }

    } while (playAgain == 'y' || playAgain == 'Y');

    cout << "Thanks for playing!" << endl;
    return 0;
}
